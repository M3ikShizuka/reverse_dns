// Create db
use reverse_dns

// Create collections
db.createCollection("dns_record")
db.createCollection("dns_record_lifetime")
db.createCollection("dns_non_historical")

//// Create indexes indexes
// Create unique compound Index for fields "a", "fqdn" for dns_record collection
db.dns_record.createIndex( { "a": 1 } )
db.dns_record.createIndex( { "fqdn": 1 } )
db.dns_record.createIndex( { "a": 1, "fqdn": 1 }, { unique: true } )
db.dns_record_lifetime.createIndex( { "expired_at": 1 } )
db.dns_record_lifetime.createIndex( { "dns_id": 1 } ) // WE DONT USE IT dns_id_1 0 (since Sun Nov 05 2023)
db.dns_non_historical.createIndex( { "dns_record_lifetime_id": 1 }, { unique: true } )

// Insert data
db.dns_record.insertMany([
    {
        "a": "173.194.222.101",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.102",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.103",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.104",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.105",
        "fqdn": "facebook.com."
    },
    {
        "a": "173.194.222.104",
        "fqdn": "facebook.com."
    }
])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("654528a7c8f527a3665e6a40"),
    '1': ObjectId("654528a7c8f527a3665e6a41"),
    '2': ObjectId("654528a7c8f527a3665e6a42"),
    '3': ObjectId("654528a7c8f527a3665e6a43"),
    '4': ObjectId("654528a7c8f527a3665e6a44"),
    '5': ObjectId("654528a7c8f527a3665e6a45")
  }
}


db.dns_record_lifetime.insertMany([
  {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a40"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a41"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a42"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a43"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
    {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a44"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("654528a7c8f527a3665e6a45"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  }
])
RESULT:
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("654528d3c8f527a3665e6a46"),
    '1': ObjectId("654528d3c8f527a3665e6a47"),
    '2': ObjectId("654528d3c8f527a3665e6a48"),
    '3': ObjectId("654528d3c8f527a3665e6a49"),
    '4': ObjectId("654528d3c8f527a3665e6a4a"),
    '5': ObjectId("654528d3c8f527a3665e6a4b")
  }
}


db.dns_non_historical.insertMany([
    {
      "dns_record_lifetime_id" : ObjectId("654528d3c8f527a3665e6a46"),
    },
    {
      "dns_record_lifetime_id" : ObjectId("654528d3c8f527a3665e6a47"),
    },
    {
      "dns_record_lifetime_id" : ObjectId("654528d3c8f527a3665e6a4a"),
    }
  ])
RESULT:
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId("6545290ec8f527a3665e6a4c"),
    '1': ObjectId("6545290ec8f527a3665e6a4d"),
    '2': ObjectId("6545290ec8f527a3665e6a4e")
  }
}

////// USE CASE 
//// 1. Retrieve DNS data from the database that needs to be updated.
// Find all historical records by date
///
GetDataRequiringUpdate()
/// ~1 sec
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
            expired_at: { $lte: new ISODate("2024-11-07T12:50:27.907+00:00") } // date
        } 
    },
    {
        $unset: "dns_non_historical" 
    },
    { $group: {_id: null, fqdn: {$addToSet: "$dns_record.fqdn"}}},
    { $unwind: "$fqdn" },
    {
        $project: {
            _id: 0,
            fqdn: "$fqdn"
        }
    }
])
  RESULT:
  {
    fqdn: 'facebook.com.'
  }
  {
    fqdn: 'google.com.'
  }



//// 4.1. Get the id of records that are out of date and will be marked as non historical.
// Search all historical records by expired_at and FQDN

// RETURN several objects with same FQDN by operation start date.
db.dns_record.aggregate([
    {
        $lookup: {
            from: "dns_record_lifetime",
            localField: "_id",
            foreignField: "dns_id",
            as: "dns_record_lifetime"
        }
    },
    { 
        $unwind: "$dns_record_lifetime"
    },
    {
        $lookup: {
        from: "dns_non_historical",
        let: { dns_record_lifetime_id: "$dns_record_lifetime._id" },
        pipeline: [
          { 
            $match: { 
              $expr: { $eq: ["$$dns_record_lifetime_id", "$dns_record_lifetime_id"] }
            } 
          },
          { $limit: 1 }
        ],
        as: "dns_non_historical"
      }
    },
    {
        $match: { 
            dns_non_historical: [],
            "fqdn": "qq.com.",
            "dns_record_lifetime.created_at": { $lt: new ISODate("2024-11-07T12:50:27.907+00:00") } // date
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    {
        $project: {
            _id: 0,
            dns_record_lifetime_id: "$dns_record_lifetime._id",
            a: 1,
            fqdn: 1
        }
    }
])
RESULT:
{
  _id: ObjectId("654528d3c8f527a3665e6a48"),
  fqdn: 'google.com.',
  a: '173.194.222.103'
}
{
  _id: ObjectId("654528d3c8f527a3665e6a49"),
  fqdn: 'google.com.',
  a: '173.194.222.104'
}
{
  _id: ObjectId("654528d3c8f527a3665e6a4b"),
  fqdn: 'facebook.com.',
  a: '173.194.222.104'
}


// 4.2 Insert new dns_record info if not exist.
// update "a": "173.194.222.103", (do nothing)
db.dns_record.updateOne(
    {
        "a": "173.194.222.103",
            "fqdn": "google.com."
    },
    { 
        $set: {
            "a": "173.194.222.103",
            "fqdn": "google.com."
        }
    },
    {
        upsert: true
    })



4.2 Find dns_record if exist, get _id 
insert others which not exist and get _id
insert dns_record_ids to recordLifetime records
!!! TODO: ЗАМЕНИТЬ UpdateOne НА Find если запись найдена получить _id
		Если запись не найдена, то InsertOnce из результата получть _id привоенной записи
		Засунуть _id в соответствующую по индексу запись recordLifetime

db.dns_record.find(
  {
    "a": "173.194.222.103",
    "fqdn": "google.com."
  },
  {
    "_id": 1
  })
RESULT:
{
  _id: ObjectId("654528a7c8f527a3665e6a42"),
  a: '173.194.222.103',
  fqdn: 'google.com.'
}

db.dns_record.updateOne(
			    {
			        "a": "173.194.222.103",
			            "fqdn": "google.com."
			    },
			    {
			        $set: {
			            "a": "173.194.222.103",
			            "fqdn": "google.com."
			        }
			    },
			    {
			        upsert: true
			    })

filter := bson.M{
		"a":          ip,
		"historical": true,
	}
	opts := options.Find().SetProjection(bson.M{
		"fqdn": 1,
	})
	cursor, err := coll.Find(ctx, filter, opts)
	if err != nil {
		return nil, err
	}



4.3 Find dns_record if exist, get _id and insert others which not exist.

db.dns_record.updateOne(
			    {
			        "a": "173.194.222.103",
			            "fqdn": "google.com."
			    },
			    {
			        $set: {
			            "a": "173.194.222.103",
			            "fqdn": "google.com."
			        }
			    },
			    {
			        upsert: true
			    })


//////////////////////////
GetNearTimeOfObsoleteRecord

db.dns_record_lifetime.aggregate([
    {
      $lookup: {
        from: "dns_non_historical",
        localField: "_id",
        foreignField: "dns_record_lifetime_id",
        as: "dns_non_historical"
      }
    },
    { 
        $match: { 
          dns_non_historical: [],
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    { 
      $sort : { expired_at : 1 } 
    },
    { 
      $limit : 1
    },
    {
      $project: {
        _id: 0,
        "expired_at": 1
      }
    }
])
RESULT:
{
  expired_at: 1970-01-01T00:00:00.000Z
}




///// Get all historical records info
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    {
        $project: {
          _id: 1,
          a: "$dns_record.a",
          fqdn: "$dns_record.fqdn",
          "created_at": 1,
          "expired_at": 1,
        }
    }
  ])
RESULT: look at get_historical_aggreated_records_after_scheduler_update.txt

Результат 31 записей для 10 FQDN (несколько ip для некоторых fqdn)


// Same by one fqdn
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    { $group: {_id: null, fqdn: {$addToSet: "$dns_record.fqdn"}}},
    { $unwind: "$fqdn" },
    {
        $project: {
          _id: 0,
          fqdn: "$fqdn",
          "created_at": 1,
          "expired_at": 1,
        }
    }
  ])
RESULT:
[
  { fqdn: 'amazon.com.' },
  { fqdn: 'wikipedia.org.' },
  { fqdn: 'qq.com.' },
  { fqdn: 'google.com.' },
  { fqdn: 'baidu.com.' },
  { fqdn: 'twitter.com.' },
  { fqdn: 'yahoo.com.' },
  { fqdn: 'taobao.com.' },
  { fqdn: 'youtube.com.' },
  { fqdn: 'facebook.com.' }
]

Результат - Все 10 FQDN обновляются и находятся в актуальном состоянии.



// Same active A records
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    { $group: {_id: null, a: {$addToSet: "$dns_record.a"}}},
    { $unwind: "$a" },
    {
        $project: {
          _id: 0,
          a: "$a",
        }
    }
  ])
RESULT
[{a:'205.251.242.103'},{a:'74.6.231.20'},{a:'203.205.254.157'},{a:'64.233.164.138'},{a:'123.150.76.218'},{a:'39.156.66.10'},{a:'113.108.81.189'},{a:'104.244.42.193'},{a:'74.6.231.21'},{a:'59.82.122.115'},{a:'104.244.42.1'},{a:'54.239.28.85'},{a:'157.240.205.35'},{a:'74.6.143.26'},{a:'104.244.42.129'},{a:'64.233.164.102'},{a:'98.137.11.163'},{a:'104.244.42.65'},{a:'173.194.221.136'},{a:'52.94.236.248'},{a:'173.194.221.91'},{a:'173.194.221.93'},{a:'98.137.11.164'},{a:'64.233.164.101'},{a:'110.242.68.66'},{a:'185.15.59.224'},{a:'64.233.164.113'},{a:'64.233.164.100'},{a:'64.233.164.139'},{a:'74.6.143.25'},{a:'173.194.221.190'},{a:'106.11.226.158'}]


Результат 31 A (ip) записей для 10 FQDN (несколько ip для некоторых fqdn)


Всё сходится.