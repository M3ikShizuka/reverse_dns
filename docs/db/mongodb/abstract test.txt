// Create db
use reverse_dns

db.createCollection("dns_record")
db.createCollection("dns_record_lifetime")
db.createCollection("dns_non_historical")


// Create collections
db.createCollection("dns_record")
,
  "a": "173.194.222.101",
  "fqdn": "google.com.",


db.createCollection("dns_record_lifetime")
,
  "dns_id" : ObjectId
  "created_at": {
    "$date": "1970-01-01T00:00:00.000Z"
  }
  "expired_at": {
    "$date": "1970-01-01T00:00:00.000Z"
  }

db.createCollection("dns_non_historical")
,
  "dns_record_lifetime_id" : ObjectId


////// Create indexes indexes
// Create unique compound Index for fields "a", "fqdn" for dns_record collection
db.dns_record.createIndex( { "a": 1, "fqdn": 1 }, { unique: true } )
db.dns_record_lifetime.createIndex( { "dns_id": 1 } )
db.dns_non_historical.createIndex( { "dns_record_lifetime_id": 1 }, { unique: true } )

NEW indices
db.dns_record.createIndex( { "a": 1 } )
db.dns_record.createIndex( { "fqdn": 1 } )
db.dns_record.createIndex( { "a": 1, "fqdn": 1 }, { unique: true } )
db.dns_record_lifetime.createIndex( { "expired_at": 1 } )
db.dns_record_lifetime.createIndex( { "dns_id": 1 } ) // WE DONT USE IT dns_id_1 0 (since Sun Nov 05 2023)
db.dns_non_historical.createIndex( { "dns_record_lifetime_id": 1 }, { unique: true } )


//// Test data
// Insert two time, expect result: MongoBulkWriteError: E11000 duplicate key error collection: reverse_dns.dns_record index: a_1_fqdn_1 dup key: { a: "173.194.222.101", fqdn: "google.com." } Result:...
db.dns_record.insertMany([
    {
        "a": "173.194.222.101",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.102",
        "fqdn": "google.com."
    },
    {
        "a": "173.194.222.103",
        "fqdn": "google.com."
    }
])

// Get IDs
insertedIds: {
  '0': ObjectId("65439338b708284ded1eb768"),
  '1': ObjectId("65439338b708284ded1eb769"),
  '2': ObjectId("65439338b708284ded1eb76a")
}


db.dns_record_lifetime.insertMany([
  {
    "dns_id" : ObjectId("65439338b708284ded1eb768"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("65439338b708284ded1eb769"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  },
  {
    "dns_id" : ObjectId("65439338b708284ded1eb76a"),
    "created_at": new ISODate("1970-01-01T00:00:00.000Z"),
    "expired_at": new ISODate("1970-01-01T00:00:00.000Z")
  }
])

// Get IDs
insertedIds: {
  '0': ObjectId("6543945cb708284ded1eb76f")
  '1': ObjectId("654395c1b708284ded1eb773"),
  '2': ObjectId("654395c1b708284ded1eb774")
}

db.dns_non_historical.insertMany([
  {
    "dns_record_lifetime_id" : ObjectId("6543945cb708284ded1eb76f"),
  },
  {
    "dns_record_lifetime_id" : ObjectId("654395c1b708284ded1eb773"),
  }
])

////// USE CASE 
//// 1. Retrieve DNS data from the database that needs to be updated.
// Find all historical records by date
// RETURN several objects with same FQDN
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
            expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } // date
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    {
        $project: {
            _id: 0,
            fqdn: "$dns_record.fqdn"
        }
    }
  ])
RESULT:
{
  fqdn: 'google.com.'
}
{
  fqdn: 'google.com.'
}


// RETURN one objects with same FQDN
  db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
            expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } // date
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    { $group: {_id: null, fqdn: {$addToSet: "$dns_record.fqdn"}}},
    { $unwind: "$fqdn" },
    {
        $project: {
            _id: 0,
            fqdn: "$fqdn"
        }
    }
  ])
  RESULT:
  {
    fqdn: 'google.com.'
  }

// OLD no that data
db.dns_record_lifetime.aggregate([
    {
      $lookup: {
        from: "dns_non_historical",
        let: { dns_record_lifetime_id: "$_id" },
        pipeline: [
          { 
            $match: { 
              $expr: { $eq: ["$$dns_record_lifetime_id", "$dns_record_lifetime_id"] }
            } 
          },
          { $limit: 1 }
        ],
        as: "dns_non_historical"
      }
    },
    { 
        $match: { 
          dns_non_historical: [],
          expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } 
        } 
    },
    { 
        $unset: "dns_non_historical" 
    }
  ])

  // Same without pipeline
  db.dns_record_lifetime.aggregate([
    {
      $lookup: {
        from: "dns_non_historical",
        localField: "_id",
        foreignField: "dns_record_lifetime_id",
        as: "dns_non_historical"
      }
    },
    { 
        $match: { 
          dns_non_historical: [],
          expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } 
        } 
    },
    { 
        $unset: "dns_non_historical" 
    }
  ])
...


//// 4.1. Get the id of records that are out of date and will be marked as non historical.
// Find all historical records by date and FQDN
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
            "dns_record.fqdn": "google.com.",
            expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } // date
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    {
        $project: {
            _id: 1,
            dns_id: 1,
            created_at: 1,
            expired_at: 1,
            fqdn: "$dns_record.fqdn",
            a: "$dns_record.a"
        }
    }
  ])

  Result:
  {
    _id: ObjectId("654395c1b708284ded1eb774"),
    dns_id: ObjectId("65439338b708284ded1eb76a"),
    created_at: 1970-01-01T00:00:00.000Z,
    expired_at: 1970-01-01T00:00:00.000Z,
    fqdn: 'google.com.',
    a: '173.194.222.103'
  }

// 4.2 Insert many new dns_record info if not exist.
// update "a": "173.194.222.103", (do nothing)
db.dns_record.updateOne(
    {
        "a": "173.194.222.103",
            "fqdn": "google.com."
    },
    { 
        $set: {
            "a": "173.194.222.103",
            "fqdn": "google.com."
        }
    },
    {
        upsert: true
    })
result:
{
    acknowledged: true,
    insertedId: null,
    matchedCount: 1,
    modifiedCount: 0,
    upsertedCount: 0
}

// update "a": "173.194.222.104", (insert new record)
db.dns_record.updateOne(
    {
        "a": "173.194.222.104",
        "fqdn": "google.com."
    },
    {
        $set: {
            "a": "173.194.222.104",
            "fqdn": "google.com."
        }
    },
    {
        upsert: true
    })
result:
{
    acknowledged: true,
    insertedId: ObjectId("6543c1e2b55addd83fcee027"),
    matchedCount: 0,
    modifiedCount: 0,
    upsertedCount: 1
  }

// 4.3 Insert many new dns_record_lifetime info.
db.dns_record_lifetime.insertMany([
    {
      "dns_id" : ObjectId("6543c1e2b55addd83fcee027"),
      "created_at": new ISODate("1970-02-02T00:00:00.000Z"),
      "expired_at": new ISODate("1970-02-02T00:00:00.000Z")
    }
])
result:
{
    acknowledged: true,
    insertedIds: {
      '0': ObjectId("6543c2a3b708284ded1eb777")
    }
  }


// 4.4 Insert many new dns_non_historical info for data (dns_record_lifetime_id) recived on step 4.1.
db.dns_non_historical.insertMany([
    {
      "dns_record_lifetime_id" : ObjectId("654395c1b708284ded1eb774"),
    }
])
result:
{
    acknowledged: true,
    insertedIds: {
      '0': ObjectId("6543c5c9b708284ded1eb779")
    }
  }


/// TEST:
db.dns_record_lifetime.aggregate([
    {
        $lookup: {
            from: "dns_non_historical",
            localField: "_id",
            foreignField: "dns_record_lifetime_id",
            as: "dns_non_historical"
        }
    },
    {
        $lookup: {
            from: "dns_record",
            localField: "dns_id",
            foreignField: "_id",
            as: "dns_record"
        }
    },
    { 
        $unwind: "$dns_record"
    },
    { 
        $match: { 
            dns_non_historical: [],
            "dns_record.fqdn": "google.com.",
            expired_at: { $lte: new ISODate("1970-01-01T00:00:00.000Z") } // date
        } 
    },
    { 
        $unset: "dns_non_historical" 
    },
    {
        $project: {
            _id: 1,
            dns_id: 1,
            created_at: 1,
            expired_at: 1,
            fqdn: "$dns_record.fqdn",
            a: "$dns_record.a"
        }
    }
  ])

  result: nothing - SUCCESS